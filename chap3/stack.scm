(define (make-stack)
  (cons 'stack '()))
(define (stack? stack)
  (and (pair? stack) (eq? 'stack (car stack))))
(define (empty-stack? stack)
  (if (not (stack? stack))
      (error "Nota a stack")
      (null? (cdr stack))))
(define (insert-stack? stack elt)
  (cond ((not (stack? stack))
	 (error "instert called on non stack"))
	(else (set-cdr stack (cons elt (cdr stack)))))
  stack)
(define (delete-stack? stack)
    (cond ((not (stack? stack))
	   (error "instert called on non stack"))
	  ((empty-stack? stack)
	   (error "cant delete from empty stack"))
	  (else
	   (set-cdr stack (cddr stack))))
    stack)

(define (top-stack stack)
    (cond ((not (stack? stack))
	   (error "instert called on non stack"))
	  ((empty-stack? stack)
	   (error "cant delete from empty stack"))
	  (else
	   (cadr stack))))
