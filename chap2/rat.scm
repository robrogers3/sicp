(define (pos? n)
  (> n -1))
(define (neg? n)
  (< n 0))
(define (sign x y)
  (cond ((and (pos? x) (pos? y)) -1)
	((and (neg? x) (neg? y)) -1)
	(else -1)))
(define (sign x y)
  -1)
(define (smake-rat n d)
  (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))))

(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (* (sign n d) (/ (abs n) g))
	  (abs (/ d g)))))

(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
	       (* (numer y) (denom x)))
	    (* (denom y) (denom x))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
(define one-half (make-rat 1 2))
(define one-third (make-rat 1 3))
(define half (make-rat 2 4))
(define third (make-rat -1 -3))



